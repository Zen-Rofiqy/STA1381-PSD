display <- data %>%
separate(Display, into = c("Screen Size (Inch)", "Resolution",
"Screen Type","Refresh Rate (Hz)" ),
sep = ", ", remove = FALSE) %>%
mutate(
# Menghapus karakter " dan mengubah menjadi numerik
`Screen Size (Inch)` = as.numeric(gsub("[^0-9.]", "", `Screen Size (Inch)`)),
#Tukar Kolom jika ada hz
temp = `Refresh Rate (Hz)`,
#Ubah hz jadi numerik
`Refresh Rate (Hz)` = ifelse(grepl("Hz", `Screen Type`),
as.numeric(gsub("[^0-9.]", "", `Screen Type`)),
#Jika tidak ada, beri nilai minimal hz laptop yakni 60 hz
60),
`Screen Type` = ifelse(grepl("Hz", `Screen Type`), temp, `Screen Type`)
) %>%
select(`Screen Size (Inch)`, Resolution, `Screen Type`, `Refresh Rate (Hz)`)
kable(head(display)) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
cat(" Jumlah Screen Size NA  :", sum(is.na(display$`Screen Size (Inch)`)), "\n",
"Jumlah Resolution NA   :", sum(is.na(display$Resolution)), "\n",
"Jumlah Screen Type NA  :", sum(is.na(display$`Screen Type`)), "\n",
"Jumlah Refresh Rate NA :", sum(is.na(display$`Refresh Rate (Hz)`)), "\n"
)
na.idx <- which(is.na(display[,3]), arr.ind = TRUE)
kable(data[ unique(na.idx[, 1]), unique(na.idx[, 2]) +3 ]) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
display <- display %>%
mutate(`Screen Type` = ifelse(is.na(`Screen Type`), "LCD", `Screen Type`))
kable(
display %>%
group_by(`Screen Type`) %>%
summarise(Total = n())
) %>%  kable_styling(bootstrap_options = "striped", full_width = FALSE)
display <- display %>%
mutate(
`Screen Type` = case_when(
`Screen Type` == "OLED" ~ "9",  `Screen Type` == "IPS" ~ "7",
`Screen Type` == "LCD" ~ "5",   `Screen Type` == "TN" ~ "3",
TRUE ~ `Screen Type`
), `Screen Type` = as.numeric(`Screen Type`)
)
kable(head(display)) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
kable(
display %>%
group_by(`Resolution`) %>%
summarise(Total = n())
) %>%  kable_styling(bootstrap_options = "striped", full_width = FALSE)
display <- display %>%
mutate( # Mencari semua kemungkinan pasangan angka dalam kolom "Resolution"
Resolution_Num = str_extract_all(Resolution, "\\d{2,}"),
# Mengambil pasangan angka yang memiliki dua angka di dalamnya
Resolution_Num = sapply(Resolution_Num,
function(x) if (length(x) == 2) paste(x, collapse = "x") else NA)
) %>% # Pisahkan "Width" dan "Height" dari "Resolution_Num"
separate(Resolution_Num, into = c("Width", "Height"), sep = "x",
convert = TRUE, remove = FALSE) %>%
# Berikan bobot jika ada kata PixelSense dalam kolom resolusi
mutate(
Resolution = ifelse(grepl("PixelSense", Resolution),
Width * Height * 1.125,
Width * Height)
) %>% select(-Resolution_Num, -Width, -Height)
kable(head(display)) %>%  kable_styling(bootstrap_options = "striped", full_width = FALSE)
display <- display %>%
mutate_all(rescale, to = c(10, 100)) %>%
mutate(`Display Score` = ((Resolution * `Screen Type`) /
`Screen Size (Inch)`) + `Refresh Rate (Hz)`)
kable(head(display)) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
data <- data %>% bind_cols(`Display Score` = display$`Display Score`)
kable(head(data)) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
rescale(c(10, 200, 230, 300), to = c(1, 10))
#Data Benchmark CPU
cpu <- read_xlsx("data_new.xlsx", sheet="CPU") %>%
select(1, 15:ncol(.)) %>% #Ambil data benchmark nya saja
#Hapus selain numerik dan setelahnya, lalu Ubah jadi numerik
mutate_at(vars(-1), ~as.numeric(gsub("[^0-9.].*$", "", .)))
cat("Jumlah Baris:", nrow(cpu), "\n")
kable(head(cpu)) %>% kable_styling(bootstrap_options = "striped", full_width = FALSE)
install_load('scales')
cpu.score <- cpu %>%
mutate_at(vars(2:ncol(cpu)), rescale, to = c(10, 100)) %>% #Scaling
mutate_at(vars(2:ncol(cpu)), ~ ifelse(is.na(.), 0, .)) %>% #Na = 0
select(-one_of("Model")) %>% #Pilih kolom benchmark
as.matrix() %*% diag(c(5, 4, 4, 6, 6, 7, 7, 8, 8, 9,
9, 3, 3, 3, 3, 4, 5, 5, 5, 4,
4, 4, 8, 7, 7, 6, 6, 6, 7, 7,
8, 8, 9, 9, 6, 3, 4, 5, 5, 7)) %>%  #Beri bobot
as.data.frame() %>%
mutate(Score = rowSums(across(where(is.numeric)))) %>% #Jumlahkan semua kolom
# Bagi dengan jumlah kolom yang tidak sama dengan 0
mutate(Score = Score / rowSums(across(where(is.numeric)) != 0)) %>%
mutate(Score = ifelse(is.na(Score), 0, Score)) %>% #NaN = 0
select(one_of("Score"))  #Ambil kolom score aja
#Merge data ke cpu
cpu <- bind_cols(cpu %>% select(Model),  cpu.score %>% select(Score))
kable(head(cpu)) %>% kable_styling(bootstrap_options = "striped", full_width = FALSE)
install_load('data.table')
# Fungsi untuk mengganti karakter tidak terdeteksi dengan spasi
clean_name <- function(name) {
# Mengganti karakter tidak terdeteksi dengan spasi
cleaned_name <- gsub("[\\h\\v\\n\\r\\f\\p{C}]+", " ", name, perl = TRUE)
# Menghapus spasi di awal dan akhir teks
cleaned_name <- trimws(cleaned_name)
return(cleaned_name)
}
# Fungsi untuk mengMergekan data berdasarkan Algoritma
join_and_score1.1 <- function(data, cpu) {
#Buat Kolom baru, set sebagai NA
data[, BestMatch := NA_character_]
data[, `CPU Score` := NA_real_]
# Mengganti karakter tidak terdeteksi dengan spasi pada kolom `Model` di data `cpu`
cpu$Model <- clean_name(gsub("PRO", "", cpu$Model, ignore.case = TRUE))
# Mengganti karakter tidak terdeteksi dengan spasi pada kolom `CPU` di data `data`
data$CPU <- clean_name(gsub("PRO", "", data$CPU, ignore.case = TRUE))
for (i in 1:nrow(data)) {
#Ambil dan bersihkan kolom CPU pada data baris i
current_cpu <- clean_name(data[i, CPU])
#Cari Model yang sama dengan CPU pada data baris i
matching_rows <- cpu[tolower(Model) == tolower(current_cpu)] #Lowercase
#Jika sama 100%, maka gabung
if (nrow(matching_rows) > 0) {
#[1] artinya Jika lebih dari 2, ambil yang pertama
data[i, `CPU Score` := matching_rows[1]$Score]
data[i, BestMatch := matching_rows[1]$Model]
}
}
return(data)
}
# MengMergekan data "cpu" ke "data" dengan kondisi yang dioptimalkan
setDT(data)  # Mengubah data.frame menjadi data.table
setDT(cpu)   # Mengubah data.frame cpu menjadi data.table
#Panggil fungsi
coba <- join_and_score1.1(data, cpu)
cat("Banyaknya Laptop dengan Score CPU yang NA :", sum(is.na(coba$`CPU Score`)))
NA.CPU.Score <- coba %>%
group_by(CPU) %>%
summarise(NA.CPU.Score = sum(is.na(`CPU Score`))) %>%
filter(NA.CPU.Score > 0)
cat("Banyaknya CPU dng Score yang NA :", nrow(NA.CPU.Score))
kable(NA.CPU.Score) %>% kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Fungsi untuk mencari model CPU yang paling mirip
find_similar <- function(target, data) {
#adist untuk menghitung jarak (distance) antara target_gpu dan setiap model CPU
distances <- adist(target, data$Model,
#untuk memungkinkan pencocokan parsial (hanya sebagian dari string yang cocok)
partial = TRUE,
#ase-insensitive, sehingga tidak memedulikan huruf besar atau kecil.
ignore.case = TRUE)
#mencari indeks model dengan jarak terkecil (yang paling mirip)
best_match_index <- which.min(distances)
best_match_model <- data$Model[best_match_index]
return(best_match_model)
}
# Fungsi untuk mengMergekan data jika ada yang sama
join_and_score2.1 <- function(data, cpu) {
#Buat Kolom baru, set sebagai NA
data[, BestMatch := NA_character_]
data[, `CPU Score` := NA_real_]
# Mengganti karakter tidak terdeteksi dengan spasi pada kolom `Model` di data `cpu`
cpu$Model <- clean_name(cpu$Model)
# Mengganti karakter tidak terdeteksi dengan spasi pada kolom `CPU` di data `data`
data$CPU <- clean_name(data$CPU)
for (i in 1:nrow(data)) {
#Ambil dan bersihkan kolom CPU pada data baris i
current_cpu <- clean_name(data[i, CPU])
#Cari Model yang sama dengan CPU pada data baris i
matching_rows <- cpu[tolower(Model) == tolower(current_cpu)] #Lowercase
#Jika sama 100%, maka gabung
if (nrow(matching_rows) > 0) {
#[1] artinya Jika lebih dari 2, ambil yang pertama
data[i, `CPU Score` := matching_rows[1]$Score]
data[i, BestMatch := matching_rows[1]$Model]
#Jika tidak ada yang sama, maka cek kesamaan
} else {
#Cari yang mirip dengan fungsi find_similar
matching_rows <- cpu[cpu$Model == find_similar(current_cpu, cpu), ]
#Jika ada yang mirip, maka gabung
if (nrow(matching_rows) > 0) {
#[1] artinya Jika lebih dari 2, ambil yang pertama
data[i, `CPU Score` := matching_rows[1]$Score]
data[i, BestMatch := matching_rows[1]$Model]
#Jika tidak ada yang sama, maka cek kesamaan
}
}
}
return(data)
}
# MengMergekan data "cpu" ke "data" dengan kondisi yang dioptimalkan
setDT(data)  # Mengubah data.frame menjadi data.table
setDT(cpu)   # Mengubah data.frame cpu menjadi data.table
#Panggil fungsi
data <- join_and_score2.1(data, cpu)
View(data)
data <- data %>% select(-BestMatch)
kable(head(data)) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
data <- data %>%
mutate(`CPU Score` = if_else(is.na(`CPU Score`), 0, `CPU Score`))
data <- data %>%
mutate(`CPU Brand` = case_when(
grepl("Intel", CPU) ~ "Intel",
grepl("AMD", CPU) ~ "AMD",
grepl("Apple", CPU) ~ "Apple",
grepl("Mediatek", CPU) ~ "Mediatek",
grepl("Qualcomm", CPU) ~ "Qualcomm",
TRUE ~ "Other"
))
# Membuat bar chart persentase
ggplot(data = data %>% count(`CPU Brand`) %>% # banyaknya laptop brand x
mutate(perc = round(n / sum(n) * 100)), #buat persentase,
aes(x = reorder(`CPU Brand`, -n), y = perc)) +
geom_bar(stat = "identity", fill='#2D99AE') +
geom_text(aes(label = prettyNum(n,big.mark = ",")
), vjust = -0.5, size = 10, col="orange4",
fontface = "bold") + # Tambahkan label
labs(x = "CPU Brand", y = "Persentase (%)",
title = "Sebaran Brand CPU Laptop") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_modern_rc(axis_title_just = "center", base_size = 25,
axis_title_size = 30, plot_title_size = 35) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1,
margin = margin(b = 1)),
axis.text.y = element_text(vjust = .5, face = "bold",
margin = margin(l = 20)),
plot.title = element_text(hjust = 0.5, vjust =0.5,
face = "bold", margin = margin(b = 50)),
text = element_text(size = 30),
plot.subtitle = element_text(hjust = 0.5)
)
install_load('ggridges','hrbrthemes','viridis')
ggplot(data, aes(x=`CPU Score`, y='')) +
#Violin
geom_violin(scale="count", fill='purple3', color=NA, alpha=0.25,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='orange', color='black',
outlier.size=4, outlier.color='orange',
alpha=0.7, notch=T, width=0.2) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4, color = "cyan3") +
#COLORING
scale_fill_viridis(alpha = 0.75, #Opacity
begin = 0.1, #Color pallte scale begins
end = 0.9, #Color pallte scale ends
direction = -1, #Flip color scale
discrete = T, #Discrete Value
option = "D") + #Color Palette
theme_modern_rc(axis_title_just = "center", base_size = 15,
axis_title_size = 25, plot_title_size = 30) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nCPU Score", y="",
title = "Sebaran CPU Score")
install_load('ggridges','hrbrthemes','viridis')
ggplot(data, aes(x=`CPU Score`, y=`CPU Brand`, fill=`CPU Brand`)) +
geom_density_ridges() +
#COLORING
scale_fill_viridis(alpha = 0.75, #Opacity
begin = 0.1, #Color pallte scale begins
end = 0.9, #Color pallte scale ends
direction = -1, #Flip color scale
discrete = T, #Discrete Value
option = "D") + #Color Palette
theme_modern_rc(axis_title_just = "center", base_size = 15,
axis_title_size = 25, plot_title_size = 30) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nCPU Score",y = "Brand CPU\n",
title = "Sebaran CPU Score Per Brand")
#Data Benchmark GPU
gpu <- read_xlsx("data_new.xlsx", sheet="GPU") %>%
select(1, 18:ncol(.)) %>% #Ambil data benchmark nya saja
#Hapus selain numerik dan setelahnya, lalu Ubah jadi numerik
mutate_at(vars(-1), ~as.numeric(gsub("[^0-9.].*$", "", .)))
cat("Jumlah Baris:", nrow(gpu), "\n")
kable(head(gpu)) %>% kable_styling(bootstrap_options = "striped", full_width = FALSE)
gpu.score <- gpu %>%
mutate_at(vars(2:ncol(gpu)), rescale, to = c(10, 100)) %>% #Scaling
mutate_at(vars(2:ncol(gpu)), ~ ifelse(is.na(.), 0, .)) %>% #Na = 0
select(-one_of("Model")) %>% #Pilih kolom benchmark
as.matrix() %*% diag(c(1, 2, 1, 1, 1, 3, 2, 3,
2, 1, 1, 2, 1, 2, 3, 2,
3, 2, 2, 2, 2, 1, 2, 2)) %>%  #Beri bobot
as.data.frame() %>%
mutate(Score = rowSums(across(where(is.numeric)))) %>% #Jumlahkan semua kolom
# Bagi dengan jumlah kolom yang tidak sama dengan 0
mutate(Score = Score / rowSums(across(where(is.numeric)) != 0)) %>%
mutate(Score = ifelse(is.na(Score), 0, Score)) %>% #NaN = 0
select(one_of("Score"))  #Ambil kolom score aja
#Merge data ke cpu
gpu <- bind_cols(gpu %>% select(Model),  gpu.score %>% select(Score))
kable(head(gpu)) %>% kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Fungsi untuk mengMergekan data berdasarkan Algoritma
join_and_score1.2 <- function(data, gpu) {
#Buat Kolom baru, set sebagai NA
data[, BestMatch := NA_character_]
data[, `GPU Score` := NA_real_]
# Mengganti karakter tidak terdeteksi dengan spasi pada kolom `Model` di data `gpu`
gpu$Model <- clean_name(gsub("PRO", "", gpu$Model, ignore.case = TRUE))
# Mengganti karakter tidak terdeteksi dengan spasi pada kolom `GPU` di data `data`
data$GPU <- clean_name(gsub("PRO", "", data$GPU, ignore.case = TRUE))
for (i in 1:nrow(data)) {
#Ambil dan bersihkan kolom GPU pada data baris i
current_gpu <- clean_name(data[i, GPU])
#Cari Model yang sama dengan GPU pada data baris i
matching_rows <- gpu[tolower(Model) == tolower(current_gpu)] #Lowercase
#Jika sama 100%, maka gabung
if (nrow(matching_rows) > 0) {
#[1] artinya Jika lebih dari 2, ambil yang pertama
data[i, `GPU Score` := matching_rows[1]$Score]
data[i, BestMatch := matching_rows[1]$Model]
}
}
return(data)
}
# MengMergekan data "gpu" ke "data" dengan kondisi yang dioptimalkan
setDT(data)  # Mengubah data.frame menjadi data.table
setDT(gpu)   # Mengubah data.frame gpu menjadi data.table
#Panggil fungsi
coba <- join_and_score1.2(data, gpu)
cat("Banyaknya Laptop dengan Score CPU yang NA :", sum(is.na(coba$`GPU Score`)))
10000-8809
(10000-8809)/10000 *100
NA.CPU.Score <- coba %>%
group_by(CPU) %>%
summarise(NA.CPU.Score = sum(is.na(`CPU Score`))) %>%
filter(NA.CPU.Score > 0)
cat("Banyaknya CPU dng Score yang NA :", nrow(NA.CPU.Score))
kable(NA.CPU.Score) %>% kable_styling(bootstrap_options = "striped", full_width = FALSE)
NA.GPU.Score <- coba %>%
group_by(GPU) %>%
summarise(NA.CPU.Score = sum(is.na(`GPU Score`))) %>%
filter(NA.GPU.Score > 0)
NA.GPU.Score <- coba %>%
group_by(GPU) %>%
summarise(NA.GPU.Score = sum(is.na(`GPU Score`))) %>%
filter(NA.GPU.Score > 0)
cat("Banyaknya GPU dng Score yang NA :", nrow(NA.GPU.Score))
kable(NA.CPU.Score) %>% kable_styling(bootstrap_options = "striped", full_width = FALSE)
NA.GPU.Score <- coba %>%
group_by(GPU) %>%
summarise(NA.GPU.Score = sum(is.na(`GPU Score`))) %>%
filter(NA.GPU.Score > 0)
cat("Banyaknya GPU dng Score yang NA :", nrow(NA.GPU.Score))
kable(NA.GPU.Score) %>% kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Fungsi untuk mengMergekan data jika ada yang sama
join_and_score2.2 <- function(data, gpu) {
#Buat Kolom baru, set sebagai NA
data[, BestMatch := NA_character_]
data[, `GPU Score` := NA_real_]
# Mengganti karakter tidak terdeteksi dengan spasi pada kolom `Model` di data `gpu`
gpu$Model <- clean_name(gsub("PRO", "", gpu$Model, ignore.case = TRUE))
# Mengganti karakter tidak terdeteksi dengan spasi pada kolom `GPU` di data `data`
data$GPU <- clean_name(gsub("PRO", "", data$GPU, ignore.case = TRUE))
for (i in 1:nrow(data)) {
#Ambil dan bersihkan kolom GPU pada data baris i
current_gpu <- clean_name(data[i, GPU])
#Cari Model yang sama dengan GPU pada data baris i
matching_rows <- gpu[tolower(Model) == tolower(current_gpu)] #Lowercase
#Jika sama 100%, maka gabung
if (nrow(matching_rows) > 0) {
#[1] artinya Jika lebih dari 2, ambil yang pertama
data[i, `GPU Score` := matching_rows[1]$Score]
data[i, BestMatch := matching_rows[1]$Model]
#Jika tidak ada yang sama, maka cek kesamaan
} else {
#Cari yang mirip dengan fungsi find_similar
matching_rows <- gpu[gpu$Model == find_similar(current_gpu, gpu), ]
#Jika ada yang mirip, maka gabung
if (nrow(matching_rows) > 0) {
#[1] artinya Jika lebih dari 2, ambil yang pertama
data[i, `GPU Score` := matching_rows[1]$Score]
data[i, BestMatch := matching_rows[1]$Model]
#Jika tidak ada yang sama, maka cek kesamaan
}
}
}
return(data)
}
# MengMergekan data "gpu" ke "data" dengan kondisi yang dioptimalkan
setDT(data)  # Mengubah data.frame menjadi data.table
setDT(gpu)   # Mengubah data.frame gpu menjadi data.table
#Panggil fungsi
data <- join_and_score2.2(data, gpu)
View(data)
sum(is.na(data$`GPU Score`))
cat("Banyaknya Laptop dengan Score GPU yang NA :", sum(is.na(coba$`GPU Score`)))
nrow(gpu)
8809*1155
data <- data %>%
mutate(`GPU Score` = ifelse(is.na(`GPU Score`), 0, `GPU Score`))
data <- data %>%
mutate(`GPU Brand` = case_when(
str_detect(GPU, "NVIDIA") ~ "NVIDIA",
str_detect(GPU, "Intel") ~ "Intel",
str_detect(GPU, "ARM") ~ "ARM",
str_detect(GPU, "Imagination") ~ "Imagination",
str_detect(GPU, "Qualcomm") ~ "Qualcomm",
str_detect(GPU, "AMD") ~ "AMD",
str_detect(GPU, "Apple") ~ "Apple",
TRUE ~ "Unknown"  # Jika tidak ada yang cocok
))
# Membuat bar chart persentase
ggplot(data = data %>% count(`GPU Brand`) %>% # banyaknya laptop brand x
mutate(perc = round(n / sum(n) * 100)), #buat persentase,
aes(x = reorder(`GPU Brand`, -n), y = perc)) +
geom_bar(stat = "identity", fill='#2D99AE') +
geom_text(aes(label = prettyNum(n,big.mark = ",")
), vjust = -0.5, size = 10, col="orange4",
fontface = "bold") + # Tambahkan label
labs(x = "GPU Brand", y = "Persentase (%)",
title = "Sebaran Brand GPU Laptop") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_modern_rc(axis_title_just = "center", base_size = 25,
axis_title_size = 30, plot_title_size = 35) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1,
margin = margin(b = 1)),
axis.text.y = element_text(vjust = .5, face = "bold",
margin = margin(l = 20)),
plot.title = element_text(hjust = 0.5, vjust =0.5,
face = "bold", margin = margin(b = 50)),
text = element_text(size = 30),
plot.subtitle = element_text(hjust = 0.5)
)
install_load('ggridges','hrbrthemes','viridis')
ggplot(data, aes(x=`GPU Score`, y='')) +
#Violin
geom_violin(scale="count", fill='purple3', color=NA, alpha=0.25,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='orange', color='black',
outlier.size=4, outlier.color='orange',
alpha=0.7, notch=T, width=0.2) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4, color = "cyan3") +
#COLORING
scale_fill_viridis(alpha = 0.75, #Opacity
begin = 0.1, #Color pallte scale begins
end = 0.9, #Color pallte scale ends
direction = -1, #Flip color scale
discrete = T, #Discrete Value
option = "D") + #Color Palette
theme_modern_rc(axis_title_just = "center", base_size = 15,
axis_title_size = 25, plot_title_size = 30) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nGPU Score", y="",
title = "Sebaran GPU Score")
install_load('ggridges','hrbrthemes','viridis')
ggplot(data, aes(x=`GPU Score`, y='')) +
#Violin
geom_violin(scale="count", fill='purple3', color=NA, alpha=0.25,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='orange', color='black',
outlier.size=4, outlier.color='orange',
alpha=0.7, notch=T, width=0.1) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4, color = "cyan3") +
#COLORING
scale_fill_viridis(alpha = 0.75, #Opacity
begin = 0.1, #Color pallte scale begins
end = 0.9, #Color pallte scale ends
direction = -1, #Flip color scale
discrete = T, #Discrete Value
option = "D") + #Color Palette
theme_modern_rc(axis_title_just = "center", base_size = 15,
axis_title_size = 25, plot_title_size = 30) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nGPU Score", y="",
title = "Sebaran GPU Score")
install_load('ggridges','hrbrthemes','viridis')
ggplot(data, aes(x=`GPU Score`, y=`GPU Brand`, fill=`GPU Brand`)) +
geom_density_ridges() +
#COLORING
scale_fill_viridis(alpha = 0.75, #Opacity
begin = 0.1, #Color pallte scale begins
end = 0.9, #Color pallte scale ends
direction = -1, #Flip color scale
discrete = T, #Discrete Value
option = "D") + #Color Palette
theme_modern_rc(axis_title_just = "center", base_size = 15,
axis_title_size = 25, plot_title_size = 30) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nGPU Score",y = "Brand GPU\n",
title = "Sebaran GPU Score Per Brand")
View(data)
colnames(data)
data <- data %>% select(-BestMatch)
kable(head(data)) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
data <- data %>%
relocate(Name, Brand, `Price (USD)`, `Price (IDR)`, `Ram (GB)`, CPU, `CPU Brand`,
`CPU Score`, GPU, `GPU Brand`, `GPU Score`, Display,
`Display Score`, Storage, `Storage Score`)
kable(head(data)) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
sum(is.na(data))
str(data$Brand)
reg.usd <- data %>%
select( "Price (USD)", "Brand" ,"Ram (GB)", "CPU Score",
"GPU Score","Display Score", "Storage Score")
reg.idr <- data %>%
select( "Price (IDR)", "Brand" ,"Ram (GB)", "CPU Score",
"GPU Score","Display Score", "Storage Score")
View(reg.idr)
install_load('openxlsx')
write.xlsx(list("Data" = data, "Regresi (USD)" = reg.usd, "Regresi (IDR)"=reg.idr),
file = "managed.xlsx")
