#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
#Function biar gak perlu ganti backslash (\) jadi slash (/).
path <- function() gsub  ( "\\\\",  "/",  readClipboard ()  )
#Copy path, Panggil function di console
#Copy r path, paste ke var yang diinginkan
#Set Working Directory
require("knitr")
opts_knit$set(root.dir = "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 5/8. Pengantar Sains Data/Tugas")
#Export chart
export.chart <- "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 5/8. Pengantar Sains Data/Tugas/Chart"
raw.data <- mtcars
data <- raw.data
install_load('DT')
datatable(raw.data, filter = 'top',
options = list(pageLength = 5))
str(data)
install_load('dplyr')
data <- raw.data %>%
mutate(
cyl = as.factor(cyl),
am = factor(ifelse(am == 0, "Automatic", "Manual")),
vs = factor(ifelse(vs == 0, "V-shaped", "Straight")),
gear = as.factor(gear),
carb = as.factor(carb)
)
str(data)
levels(data$cyl); levels(data$vs); levels(data$am); levels(data$gear); levels(data$carb)
install_load('ggplot2')
theme1.1 <- list(
theme(axis.text.x = element_text(angle = 45, hjust = 1,
margin = margin(b = 10, t=20)),
axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 50, r = 20)),
plot.title = element_text(hjust = 0.5, face = "bold"),
text = element_text(size = 30),
plot.subtitle = element_text(hjust = 0.5),
panel.background = element_rect(fill = 'transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(linewidth = 1, colour = "black"))
)
theme2 <- list(
theme(axis.text.x = element_text(angle = 45, hjust = 1,
margin = margin(b = 10, t=0)),
axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = -40)),
plot.title = element_text(hjust = 0.5, face = "bold"),
text = element_text(size = 30),
plot.subtitle = element_text(hjust = 0.5),
panel.background = element_rect(fill = 'transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
)
theme3.2 <- list(
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"),
text = element_text(size = 30),
plot.subtitle = element_text(hjust = 0.5),
panel.background = element_rect(fill = 'transparent', color=NA),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_line(colour = "grey90"),
axis.line = element_line(linewidth = 1.5, colour = "black")
)
)
install_load('ggtext')
chart <-
ggplot(data, aes(x=mpg,
y='')) +
#Violin
geom_violin(scale="count", fill='#4692A0', color='black', alpha=0.9,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='#49535C', color='black',
outlier.size=4, outlier.color='#49535C',
notch=T, width=0.2) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4,
color = "#AB8264") +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nMPG (Jarak tempuh per gallon bahan bakar)", y='',
title = "Sebaran Mil Per Galon Mobil",
subtitle = "Seberapa jauh mobil dapat berjalan dengan satu galon bahan bakar?\n") + theme2 +
#Tambah Mean Value
geom_richtext(
data = data.frame(x = mean(data$mpg), y = 1.25,
label = paste("Mean:",
round(mean(data$mpg),
2))),
aes(x, y, label = label), size = 7, color = "white",
fill = "#AB8264", box.color = "white", parse = TRUE
) +
#Tambah panah
geom_segment(aes(x = mean(data$mpg),
xend = mean(data$mpg),
y = 1,
yend = 1.2225),
arrow = arrow(type = "closed", length = unit(0.1, "inches")),
lineend = "round", color = "#AB8264", size=1.5)
chart
#Export Chart
ggsave("01_Sebaran Mil Per Galon.png", chart, path = export.chart,
dpi = 300, height = 10, width = 20)
model.ols <- lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, data=data)
summary(model.ols)
car::vif(model.ols)
ols.bs <- as.data.frame( olsrr::ols_step_best_subset(model.ols)  )
ols.bs
chart <-
ggplot(ols.bs, aes(x = n, y = aic)) +
geom_line(size=1) +
geom_point(size=4) +
geom_point(data = ols.bs[which.min(ols.bs$aic), ], color = "#F15E2B", size = 8) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "Jumlah Variabel Prediktor",
y='AIC',
title = "Pergerakan Nilai AIC",
subtitle = "Untuk Model terbaik, Nilai AIC yang terkecilnya berapa sih?\n") + theme1.1 +
theme(axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = 10))) +
geom_text(aes(x = ols.bs[which.min(ols.bs$aic), ]$n + 1,
y = ols.bs[which.min(ols.bs$aic), ]$aic +1,
label = paste0("AIC = ", round(ols.bs[which.min(ols.bs$aic), ]$aic, 2),
"\nModel(", ols.bs[which.min(ols.bs$aic), ]$mindex, ")")),
color = "#F15E2B", size = 8)
chart
#Export Chart
ggsave("11_Pergerakan Nilai AIC.png", chart, path = export.chart,
dpi = 300, height = 9, width = 16)
chart <-
ggplot(ols.bs, aes(x = n, y = rsquare)) +
geom_line(size=1) +
geom_point(size=4) +
geom_point(data = ols.bs[which.max(ols.bs$rsquare), ], color = "#589E44", size = 8) +
geom_point(data = ols.bs[which(ols.bs$mindex  == 4), ], color = "#F15E2B", size = 5) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "Jumlah Variabel Prediktor",
y='Rsquare',
title = "Pergerakan Nilai Rsquare",
subtitle = "Untuk Model terbaik, Nilai Rsquare yang terbesarnya berapa sih?\n") +
theme1.1 +
theme(axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = 10))) +
geom_text(aes(x = ols.bs[which.max(ols.bs$rsquare), ]$n -0.5,
y = ols.bs[which.max(ols.bs$rsquare), ]$rsquare -0.02,
label = paste0("Rsquare = ",
round(ols.bs[which.max(ols.bs$rsquare), ]$rsquare, 2),
"\nModel(", ols.bs[which.max(ols.bs$rsquare), ]$mindex, ")")),
color = "#589E44", size = 8) +
geom_text(aes(x = ols.bs[which(ols.bs$mindex == 4) , ]$n,
y = ols.bs[which(ols.bs$mindex == 4), ]$rsquare -0.015,
label = paste0("Rsquare = ", round(ols.bs[which(ols.bs$mindex  == 4),
]$rsquare, 2),
"\nModel(", ols.bs[which(ols.bs$mindex  == 4),
]$mindex, ")")),
color = "#F15E2B", size = 5)
chart
#Export Chart
ggsave("12_Pergerakan Nilai Rsquare.png", chart, path = export.chart,
dpi = 300, height = 9, width = 16)
ols.bs[which(ols.bs$mindex == 4) , ]$predictors
ols.fs <- as.data.frame(olsrr::ols_step_forward_p(model.rumah))
ols.fs <- as.data.frame(olsrr::ols_step_forward_p(model.ols))
ols.fs <- olsrr::ols_step_forward_p(model.ols)
str(ols.fs)
ols.fs
ols.fs$summary
View(ols.fs)
ols.fs[1]
ols.fs[2]
ols.fs[[1]]
ols.fs[1:10]
as.data.frame(ols.fs[1:10])
ols.fs <- olsrr::ols_step_forward_p(model.ols)
datatable(as.data.frame(ols.fs[1:10]))
ols.fs[-model]
ols.fs[-'model']
ols.fs[,'model']
ols.fs[-11]
ols.fs[-12]
length(ols.fs)
datatable(as.data.frame(ols.fs[-11]))
ols.fs <- olsrr::ols_step_forward_p(model.ols); ols.fs
ols.bs[which(ols.bs$mindex == 5) , ]$predictors
ols.be <- olsrr::ols_step_backward_p(model.ols)
ols.be <- olsrr::ols_step_backward_p(model.ols); ols.be
colnames(data[,-c('carb', 'disp', 'gear', 'drat', 'sec')])
data[,-c('carb', 'disp', 'gear', 'drat', 'sec')]
data[-c('carb', 'disp', 'gear', 'drat', 'sec')]
colnames(data %>% select(-carb, -disp, -gear, -drat, -qses))
colnames(data %>% select(-carb, -disp, -gear, -drat, -qsec))
colnames(data %>% select(-carb, -disp, -gear, -drat, -qsec, -mpg))
ols.bs[which(ols.bs$mindex == 5) , ]$aic
best.model.ols <- lm(mpg ~ cyl + hp + wt + am, data=data)
summary(best.model.ols)
layout(matrix(c(1, 2,
3, 3), nrow = 2, byrow = TRUE))
plot(best.model.ols, 1)
plot(best.model.ols,2)
plot(x = 1:dim(data)[1],
y = best.model.ols$residuals,
type = 'b',
ylab = "Residuals",
xlab = "Observation")
install_load('randtests','lmtest','car')
# Melakukan uji asumsi
t_test <- t.test(best.model.ols$residuals, mu = 0, conf.level = 0.95)
runs_test <- runs.test(best.model.ols$residuals)
bp_test <- ncvTest(best.model.ols)
shapiro_test <- shapiro.test(best.model.ols$residuals)
# Membuat dataframe hasil
asumsi <- data.frame(
"Asumsi" = c("Nilai harapan sisaan sama dengan nol", "Sisaan saling bebas", "Ragam Sisaan Homogen", "Normalitas Sisaan"),
"Jenis Uji" = c("t-test", "Runs Test", "Non Constant Variance Test", "Shapiro-Wilk Test"),
"p-value" = c(t_test$p.value, runs_test$p.value, bp_test$p, shapiro_test$p.value),
"Kesimpulan" = c(ifelse(t_test$p.value < 0.05, "Tidak Terpenuhi", "Terpenuhi"),
ifelse(runs_test$p.value < 0.05, "Tidak Terpenuhi", "Terpenuhi"),
ifelse(bp_test$p < 0.05, "Tidak Terpenuhi", "Terpenuhi"),
ifelse(shapiro_test$p.value < 0.05, "Tidak Terpenuhi", "Terpenuhi"))
)
datatable(asumsi)
weights <- 1 / lm(abs(best.model.ols$residuals) ~ best.model.ols$fitted.values)$fitted.values^2
best.model.ols_wls <- lm(mpg ~ cyl + hp + wt + am, data=data, weights = weights)
summary(best.model.ols_wls)
# Melakukan uji asumsi
t_test <- t.test(best.model.ols_wls$residuals, mu = 0, conf.level = 0.95)
runs_test <- runs.test(best.model.ols_wls$residuals)
bp_test <- ncvTest(best.model.ols_wls)
shapiro_test <- shapiro.test(best.model.ols_wls$residuals)
# Membuat dataframe hasil
asumsi <- data.frame(
"Asumsi" = c("Nilai harapan sisaan sama dengan nol", "Sisaan saling bebas", "Ragam Sisaan Homogen", "Normalitas Sisaan"),
"Jenis Uji" = c("t-test", "Runs Test", "Non Constant Variance Test", "Shapiro-Wilk Test"),
"p-value" = c(t_test$p.value, runs_test$p.value, bp_test$p, shapiro_test$p.value),
"Kesimpulan" = c(ifelse(t_test$p.value < 0.05, "Tidak Terpenuhi", "Terpenuhi"),
ifelse(runs_test$p.value < 0.05, "Tidak Terpenuhi", "Terpenuhi"),
ifelse(bp_test$p < 0.05, "Tidak Terpenuhi", "Terpenuhi"),
ifelse(shapiro_test$p.value < 0.05, "Tidak Terpenuhi", "Terpenuhi"))
)
datatable(asumsi)
x <- model.matrix(mpg ~ cyl + hp + wt + am, data=data)[,-1]
y <- data[,1]
# Melakukan cross validation
install_load('glmnet')
cv.r <- cv.glmnet(x,y,alpha=0); plot(cv.r)
best.lr <- cv.r$lambda.min #Lambda Ridge Terbaik
best.ridge <- glmnet(x,y,alpha=0,lambda=best.lr); coef(best.ridge)
rsq <- function(bestmodel,bestlambda,x,y){
#y duga
y.duga <- predict(bestmodel, s = bestlambda, newx = x)
#JKG dan JKT
jkt <- sum((y - mean(y))^2)
jkg <- sum((y.duga- y)^2)
#find R-Squared
rsq <- 1 - jkg/jkt
return(rsq)
}
r2.ridge <- rsq(best.ridge, best.lr, x, y); r2.ridge
install_load('rio')
raw.data <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1341-MPDW/main/Data/MAANG%20Stock%20Prices.csv")
nrow(raw.data)
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
path <- function(){
gsub  ( "\\\\",  "/",  readClipboard ()  )
}
#Copy path, Panggil function di console
#Copy r path, paste ke var yang diinginkan
#Export chart
export.chart <- "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 5/6. Metode Peramalan Deret Waktu/@Proj/STA1341-MPDW/Pertemuan 5/Chart"
install_load('rio')
raw.data <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1341-MPDW/main/Data/MAANG%20Stock%20Prices.csv")
str(raw.data)
sum(is.na(raw.data))
install_load('dplyr')
data <- raw.data %>%
mutate(
Date = as.Date(raw.data[, 2], format = "%m/%d/%y"), #Mengubah menjadi Date
across(3:ncol(raw.data), as.numeric)                #Mengubah menjadi Numerik
)
str(data)
cat('Banyaknya Data Kosong', sum(is.na(data)))
# Mencari indeks baris dan kolom yang mengandung NA
na.idx <- which(is.na(data), arr.ind = TRUE)
# Menampilkan data raw dengan baris dan kolom yang mengandung NA
install_load('kableExtra','DT')
datatable(raw.data[                        # Subsetting
unique(na.idx[, 1]),   # Vektor indeks baris yang mengandung NA
unique(na.idx[, 2])  ] # Vektor indeks kolom yang mengandung NA
)
data <- data %>%
filter(!row_number() %in% unique(na.idx[, 1]))
datatable(data, filter = 'top',
options = list(pageLength = 5))
install_load('ggplot2','extrafont')
# font_import(); loadfonts() #Run ini sekali aja
theme1 <- list(
guides(fill="none"), #No Legends
theme(
text = element_text(size = 33),
axis.title = element_text(size=15),
axis.title.x = element_text(size=33),
axis.title.y = element_text(size=33),
axis.text.y = element_text(vjust = .5, face = "bold"),
plot.title = element_text(hjust = 0.5, size=40),
panel.background = element_rect(fill = 'transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_line(colour = "grey90"),
axis.line = element_line(linewidth = 2, colour = "grey90"))
)
install_load('viridis','ggrepel')
#Plot
cts.maang <-
ggplot(data, aes(x=Date, y=`Adj Close`)) + #Data
geom_line(aes(color=Name), linewidth=1) + #Timeseries
#Color
scale_color_viridis(alpha = 0.75, #Opacity
begin = 0, #Color pallte scale begins
end = 0.9, #Color pallte scale ends
direction = -1, #Flip color scale
discrete = T, #Discrete Value
option = "D") + #Color Palette
theme1 + #THeme
labs(x = "\nTahun", y = "Harga Saham (USD)\n") + #Label X & Y
ggtitle("Time Series MAANG") +
# Label / legend
geom_text_repel(
data=data[data$Date == max(data$Date),], #Posisi di ujung data
aes(color = Name, label = Name), #Warna garis & label saham
size = 8, #Ukuran text
nudge_x = 80, #Posisi Text (kanan 50)
hjust = 0, #Ujung
segment.size = 1,               #Ukuran garis
segment.alpha = .75,             #transparasi garis
segment.linetype = "dotted",    #Time garis
box.padding = .4, #Biar label saham nggak dempetan
segment.curvature = -0.1, #biar garis mulus
segment.ncp = 8,
segment.angle = 60
) +
#Axis
coord_cartesian(clip = "off"
) +
scale_x_date( #Sumbu x
date_breaks = "1 year",  # Menampilkan label setiap tahun
date_labels = "%Y",  # Format label tahun
limits = c(as.Date("2018-07-30"), as.Date("2023-12-28"))
#Tampilin lebih dari 20023-07-28 agar label saham bisa masuk
) +
scale_y_continuous( #Sumbu y
labels = scales::dollar_format(prefix = "$") #tambahin dolar
) +
annotate( #Buat nandain batas data
"text", x = as.Date("2023-7-28"), y = 50,
label = "28 Juli", size=6
) +
geom_vline( #Buat garis batas data
xintercept = as.numeric(as.Date("2023-07-28")),
linetype = "dotted", color = "red")
cts.maang
#Export Chart
ggsave("01_Time Series MAANG.png", cts.maang, path = export.chart,
dpi = 300, height = 9, width = 16)
amzn <- data %>%
select(1, 2, 7) %>%  # Memilih kolom 1, 2, dan 7
filter(Name == "AMZN", Date >= as.Date("2022-01-01"))  # Filter data saham Amazon tahun 2022 ke atas
rownames(amzn) <- NULL
str(amzn)
datatable(amzn)
amzn.ts <- ts(amzn[,3])
summary(amzn.ts)
ts.plot(amzn.ts, xlab="Time Period", ylab="Harga Saham",
main = "Time Series Amazon", col='orange', lwd=2)
points(amzn.ts, col='orange', lwd=1.5)
install_load('ggplot2')
plot_stas <- raw.data |>
ggplot(aes(x = datum, y = N02BA)) + geom_line() + theme_bw() +
xlab("Bulan") + ylab("Penjualan Obat N02BA")
plot_stas
View(raw.data)
View(amzn)
install_load('ggplot2')
plot_stas <- amzn |>
ggplot(aes(x = Date, y = `Adj Close`)) + geom_line() + theme_bw() +
xlab("Bulan") + ylab("Penjualan Obat N02BA")
plot_stas
mean(stas)
install_load('ggplot2')
plot_stas <- amzn |>
ggplot(aes(x = Date, y = `Adj Close`)) + geom_line() + theme_bw() +
xlab("Bulan") + ylab("Penjualan Obat N02BA")
plot_stas
mean(amzn)
install_load('ggplot2')
plot_stas <- amzn |>
ggplot(aes(x = Date, y = `Adj Close`)) + geom_line() + theme_bw() +
xlab("Bulan") + ylab("Penjualan Obat N02BA")
plot_stas
mean(amzn.ts)
mean(amzn.ts)
acf(amzn.ts)
tseries::adf.test(amzn.ts)
tseries::adf.test(amzn.ts)
index <- seq(1:nrow(amzn))
bc = boxcox(amzn.ts~index, lambda = seq(0,4,by=0.01))
install_load('MASS')
index <- seq(1:nrow(amzn))
bc = boxcox(amzn.ts~index, lambda = seq(0,4,by=0.01))
#Nilai Rounded Lambda
lambda <- bc$x[which.max(bc$y)]
lambda
#SK
bc$x[bc$y > max(bc$y) - 1/2 * qchisq(.95,1)]
dt_stas1 <- stas[1:67] |> ts()
dt_amzn.ts1 <- amzn.ts[1:67] |> ts()
mean(dt_amzn.ts1 )
var(dt_amzn.ts1 )
View(amzn)
coba <- cbind(1:nrow(amzn), amzn)
View(coba)
coba <- cbind(index = 1:nrow(amzn), amzn)
View(coba)
amzn <- cbind(index = 1:nrow(amzn), amzn)
install_load('ggplot2')
plot_stas <- amzn |>
ggplot(aes(x = amzn, y = `Adj Close`)) + geom_line() + theme_bw() +
xlab("Bulan") + ylab("Penjualan Obat N02BA")
plot_stas
amzn <- cbind(index = 1:nrow(amzn), amzn)
install_load('ggplot2')
plot_stas <- amzn |>
ggplot(aes(x = index, y = `Adj Close`)) + geom_line() + theme_bw() +
xlab("Bulan") + ylab("Penjualan Obat N02BA")
plot_stas
amzn |>
ggplot(aes(x = index, y = `Adj Close`)) + geom_line() + theme_bw() +
xlab("Bulan") + ylab("Penjualan Obat N02BA")
amzn |>
ggplot(aes(x = index, y = `Adj Close`)) + geom_line() + theme_bw() +
xlab("Bulan") + ylab("Penjualan Obat N02BA")
View(amzn)
amzn <- data %>%
select(1, 2, 7) %>%  # Memilih kolom 1, 2, dan 7
filter(Name == "AMZN", Date >= as.Date("2022-01-01"))  # Filter data saham Amazon tahun 2022 ke atas
amzn <- data %>%
select(1, 2, 7) %>%  # Memilih kolom 1, 2, dan 7
filter(Name == "AMZN", Date >= as.Date("2022-01-01"))  # Filter data saham Amazon tahun 2022 ke atas
amzn <- data %>%
select(1, 2, 7) %>%  # Memilih kolom 1, 2, dan 7
filter(Name == "AMZN", Date >= as.Date("2022-01-01"))  # Filter data saham Amazon tahun 2022 ke atas
amzn <- data %>%
select(1, 2, 7) %>%  # Memilih kolom 1, 2, dan 7
filter(Name == "AMZN", Date >= as.Date("2022-01-01"))  # Filter data saham Amazon tahun 2022 ke atas
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
path <- function(){
gsub  ( "\\\\",  "/",  readClipboard ()  )
}
#Copy path, Panggil function di console
#Copy r path, paste ke var yang diinginkan
#Export chart
export.chart <- "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 5/6. Metode Peramalan Deret Waktu/@Proj/STA1341-MPDW/Pertemuan 5/Chart"
install_load('rio')
raw.data <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1341-MPDW/main/Data/MAANG%20Stock%20Prices.csv")
