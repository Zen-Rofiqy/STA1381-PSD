+PSTV12 +PSTV13, data=data_train)
summary(model)
bs <- as.data.frame( olsrr::ols_step_best_subset(model)  )
chart <-
ggplot(bs, aes(x = n, y = aic)) +
geom_line(size=1) +
geom_point(size=4) +
geom_point(data = bs[which.min(bs$aic), ], color = "#F15E2B", size = 8) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "Jumlah Variabel Prediktor",
y='AIC',
title = "Pergerakan Nilai AIC",
subtitle = "Untuk Model terbaik, Nilai AIC yang terkecilnya berapa sih?\n") + theme1.1 +
theme(axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = 10))) +
geom_text(aes(x = bs[which.min(bs$aic), ]$n + 1,
y = bs[which.min(bs$aic), ]$aic +20,
label = paste0("AIC = ", round(bs[which.min(bs$aic), ]$aic, 2),
"\nModel(", bs[which.min(bs$aic), ]$mindex, ")")),
color = "#F15E2B", size = 8)
chart
chart <-
ggplot(bs, aes(x = n, y = rsquare)) +
geom_line(size=1) +
geom_point(size=4) +
geom_point(data = bs[which.max(bs$rsquare), ], color = "#F15E2B", size = 8) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "Jumlah Variabel Prediktor",
y='Rsquare',
title = "Pergerakan Nilai Rsquare",
subtitle = "Untuk Model terbaik, Nilai Rsquare yang terbesarnya berapa sih?\n") +
theme1.1 +
theme(axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = 10))) +
geom_text(aes(x = bs[which.max(bs$rsquare), ]$n -0.5,
y = bs[which.max(bs$rsquare), ]$rsquare -0.02,
label = paste0("Rsquare = ",
round(bs[which.max(bs$rsquare), ]$rsquare, 2),
"\nModel(", bs[which.max(bs$rsquare), ]$mindex, ")")),
color = "#F15E2B", size = 8)
chart
bs[which(bs$mindex == 7) , ]$predictors
be <- olsrr::ols_step_backward_p(model); be
r2.dummy <- summary(model)$adj.r.squared
cat("R-Squared :", r2.dummy)
weights <- 1 / lm(abs(model$residuals) ~ model$fitted.values)$fitted.values^2
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)
r2.wls <- summary(model.wls)$adj.r.squared
cat("R-Squared :", r2.wls)
x <- model.matrix(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train)[,-1]
y <- data_train$UHH
# Melakukan cross validation
install_load('glmnet')
cv.r <- cv.glmnet(x, y, alpha=0); plot(cv.r)
best.lr <- cv.r$lambda.min #Lambda Ridge Terbaik
best.ridge <- glmnet(x,y,alpha=0,lambda=best.lr); coef(best.ridge)
rsq <- function(bestmodel,bestlambda,x,y){
#y duga
y.duga <- predict(bestmodel, s = bestlambda, newx = x)
#JKG dan JKT
jkt <- sum((y - mean(y))^2)
jkg <- sum((y.duga- y)^2)
#find R-Squared
rsq <- 1 - jkg/jkt
return(rsq)
}
r2.ridge <- rsq(best.ridge, best.lr, x, y)
cat("R-Squared :", r2.ridge)
cv.l <- cv.glmnet(x,y,alpha=1); plot(cv.l)
best.ll <- cv.l$lambda.min #Lambda Lasso Terbaik
bestlasso <- glmnet(x,y,alpha=1,lambda=best.ll); coef(bestlasso)
rsq <- data.frame(Dummy = r2.dummy, WLS = r2.wls, Ridge = r2.ridge,
Lasso = r2.lasso)
datatable(rsq,
filter = 'top',
options = list(pageLength = 5))
cat("R-Squared Terbaik :", names(rsq)[which.max(rsq)],
"\nDengan nilai :", max(rsq))
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
path <- function(){
gsub  ( "\\\\",  "/",  readClipboard ()  )
}
#Copy path, Panggil function di console
#Copy r path, paste ke var yang diinginkan
setwd("C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 5/8. Pengantar Sains Data/Tugas/TM 2")
install_load('ggplot2')
theme1.1 <- list(
theme(axis.text.x = element_text(angle = 45, hjust = 1,
margin = margin(b = 10, t=20)),
axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 50, r = 20)),
plot.title = element_text(hjust = 0.5, face = "bold"),
text = element_text(size = 30),
plot.subtitle = element_text(hjust = 0.5),
panel.background = element_rect(fill = 'transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(linewidth = 1, colour = "black"))
)
install_load('rio')
raw.data1 <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1381-PSD/main/Tugas/TM%202/Train.csv")
data_train <- raw.data1
raw.data2 <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1381-PSD/main/Tugas/TM%202/Test.csv")
data_test <- raw.data2
install_load("DT")
datatable(data_train,
filter = 'top',
options = list(pageLength = 5))
datatable(data_test,
filter = 'top',
options = list(pageLength = 5))
cat("Banyaknya Data Train :", nrow(raw.data1), "(",
nrow(raw.data1)/( nrow(raw.data1) + nrow(raw.data2) ) * 100, "%)",
"\nBanyaknya Data Test  :", nrow(raw.data1), "(",
nrow(raw.data2)/( nrow(raw.data1) + nrow(raw.data2) ) * 100, "%)",
"\nTotal Data Test dan Train :", ( nrow(raw.data1) + nrow(raw.data2) ) )
str(data_train)
model  <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train)
summary(model)
bs <- as.data.frame( olsrr::ols_step_best_subset(model)  )
chart <-
ggplot(bs, aes(x = n, y = aic)) +
geom_line(size=1) +
geom_point(size=4) +
geom_point(data = bs[which.min(bs$aic), ], color = "#F15E2B", size = 8) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "Jumlah Variabel Prediktor",
y='AIC',
title = "Pergerakan Nilai AIC",
subtitle = "Untuk Model terbaik, Nilai AIC yang terkecilnya berapa sih?\n") + theme1.1 +
theme(axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = 10))) +
geom_text(aes(x = bs[which.min(bs$aic), ]$n + 1,
y = bs[which.min(bs$aic), ]$aic +20,
label = paste0("AIC = ", round(bs[which.min(bs$aic), ]$aic, 2),
"\nModel(", bs[which.min(bs$aic), ]$mindex, ")")),
color = "#F15E2B", size = 8)
chart
chart <-
ggplot(bs, aes(x = n, y = rsquare)) +
geom_line(size=1) +
geom_point(size=4) +
geom_point(data = bs[which.max(bs$rsquare), ], color = "#F15E2B", size = 8) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "Jumlah Variabel Prediktor",
y='Rsquare',
title = "Pergerakan Nilai Rsquare",
subtitle = "Untuk Model terbaik, Nilai Rsquare yang terbesarnya berapa sih?\n") +
theme1.1 +
theme(axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = 10))) +
geom_text(aes(x = bs[which.max(bs$rsquare), ]$n -0.5,
y = bs[which.max(bs$rsquare), ]$rsquare -0.02,
label = paste0("Rsquare = ",
round(bs[which.max(bs$rsquare), ]$rsquare, 2),
"\nModel(", bs[which.max(bs$rsquare), ]$mindex, ")")),
color = "#F15E2B", size = 8)
chart
bs[which(bs$mindex == 7) , ]$predictors
fs <- olsrr::ols_step_forward_p(model); fs
be <- olsrr::ols_step_backward_p(model); be
r2.dummy <- summary(model)$adj.r.squared
cat("R-Squared :", r2.dummy)
weights <- 1 / lm(abs(model$residuals) ~ model$fitted.values)$fitted.values^2
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)
r2.wls <- summary(model.wls)$adj.r.squared
cat("R-Squared :", r2.wls)
x <- model.matrix(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train)[,-1]
y <- data_train$UHH
# Melakukan cross validation
install_load('glmnet')
cv.r <- cv.glmnet(x, y, alpha=0); plot(cv.r)
best.lr <- cv.r$lambda.min #Lambda Ridge Terbaik
best.ridge <- glmnet(x,y,alpha=0,lambda=best.lr); coef(best.ridge)
rsq <- function(bestmodel,bestlambda,x,y){
#y duga
y.duga <- predict(bestmodel, s = bestlambda, newx = x)
#JKG dan JKT
jkt <- sum((y - mean(y))^2)
jkg <- sum((y.duga- y)^2)
#find R-Squared
rsq <- 1 - jkg/jkt
return(rsq)
}
r2.ridge <- rsq(best.ridge, best.lr, x, y)
cat("R-Squared :", r2.ridge)
cv.l <- cv.glmnet(x,y,alpha=1); plot(cv.l)
best.ll <- cv.l$lambda.min #Lambda Lasso Terbaik
bestlasso <- glmnet(x,y,alpha=1,lambda=best.ll); coef(bestlasso)
r2.lasso <- rsq(bestlasso, best.ll, x, y)
cat("R-Squared :", r2.lasso)
rsq <- data.frame(Dummy = r2.dummy, WLS = r2.wls, Ridge = r2.ridge,
Lasso = r2.lasso)
datatable(rsq,
filter = 'top',
options = list(pageLength = 5))
cat("R-Squared Terbaik :", names(rsq)[which.max(rsq)],
"\nDengan nilai :", max(rsq))
pre <- predict(model, newdata = data_test)
data_test. <- data_test %>%
mutate(UHH = pre)
str(data_test)
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
path <- function(){
gsub  ( "\\\\",  "/",  readClipboard ()  )
}
#Copy path, Panggil function di console
#Copy r path, paste ke var yang diinginkan
setwd("C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 5/8. Pengantar Sains Data/Tugas/TM 2")
install_load('ggplot2')
theme1.1 <- list(
theme(axis.text.x = element_text(angle = 45, hjust = 1,
margin = margin(b = 10, t=20)),
axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 50, r = 20)),
plot.title = element_text(hjust = 0.5, face = "bold"),
text = element_text(size = 30),
plot.subtitle = element_text(hjust = 0.5),
panel.background = element_rect(fill = 'transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(linewidth = 1, colour = "black"))
)
install_load('rio')
raw.data1 <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1381-PSD/main/Tugas/TM%202/Train.csv")
data_train <- raw.data1
raw.data2 <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1381-PSD/main/Tugas/TM%202/Test.csv")
data_test <- raw.data2
install_load("DT")
datatable(data_train,
filter = 'top',
options = list(pageLength = 5))
datatable(data_test,
filter = 'top',
options = list(pageLength = 5))
cat("Banyaknya Data Train :", nrow(raw.data1), "(",
nrow(raw.data1)/( nrow(raw.data1) + nrow(raw.data2) ) * 100, "%)",
"\nBanyaknya Data Test  :", nrow(raw.data1), "(",
nrow(raw.data2)/( nrow(raw.data1) + nrow(raw.data2) ) * 100, "%)",
"\nTotal Data Test dan Train :", ( nrow(raw.data1) + nrow(raw.data2) ) )
str(data_train)
str(data_test)
install_load('dplyr')
data_train <- raw.data1 %>%
mutate(across(everything(), as.factor),
UHH = as.numeric(UHH))
str(data_train)
data_test <- raw.data2 %>%
mutate(across(everything(), as.factor))
str(data_test)
colnames(data_train %>% select(-UHH)) == colnames(data_test)
install_load('DT')
lv <- rbind( colnames(data_test),
sapply(seq_along(data_train %>% select(-UHH)), function(i) {
identical(levels(data_train[[i]]), levels(data_test[[i]]))
}) )
datatable(lv,
filter = 'top',
options = list(pageLength = 5))
model  <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train)
summary(model)
bs <- as.data.frame( olsrr::ols_step_best_subset(model)  )
chart <-
ggplot(bs, aes(x = n, y = aic)) +
geom_line(size=1) +
geom_point(size=4) +
geom_point(data = bs[which.min(bs$aic), ], color = "#F15E2B", size = 8) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "Jumlah Variabel Prediktor",
y='AIC',
title = "Pergerakan Nilai AIC",
subtitle = "Untuk Model terbaik, Nilai AIC yang terkecilnya berapa sih?\n") + theme1.1 +
theme(axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = 10))) +
geom_text(aes(x = bs[which.min(bs$aic), ]$n + 1,
y = bs[which.min(bs$aic), ]$aic +20,
label = paste0("AIC = ", round(bs[which.min(bs$aic), ]$aic, 2),
"\nModel(", bs[which.min(bs$aic), ]$mindex, ")")),
color = "#F15E2B", size = 8)
chart
chart <-
ggplot(bs, aes(x = n, y = rsquare)) +
geom_line(size=1) +
geom_point(size=4) +
geom_point(data = bs[which.max(bs$rsquare), ], color = "#F15E2B", size = 8) +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "Jumlah Variabel Prediktor",
y='Rsquare',
title = "Pergerakan Nilai Rsquare",
subtitle = "Untuk Model terbaik, Nilai Rsquare yang terbesarnya berapa sih?\n") +
theme1.1 +
theme(axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = 10))) +
geom_text(aes(x = bs[which.max(bs$rsquare), ]$n -0.5,
y = bs[which.max(bs$rsquare), ]$rsquare -0.02,
label = paste0("Rsquare = ",
round(bs[which.max(bs$rsquare), ]$rsquare, 2),
"\nModel(", bs[which.max(bs$rsquare), ]$mindex, ")")),
color = "#F15E2B", size = 8)
chart
bs[which(bs$mindex == 7) , ]$predictors
fs <- olsrr::ols_step_forward_p(model); fs
be <- olsrr::ols_step_backward_p(model); be
r2.dummy <- summary(model)$adj.r.squared
cat("R-Squared :", r2.dummy)
weights <- 1 / lm(abs(model$residuals) ~ model$fitted.values)$fitted.values^2
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)
r2.wls <- summary(model.wls)$adj.r.squared
cat("R-Squared :", r2.wls)
x <- model.matrix(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train)[,-1]
y <- data_train$UHH
# Melakukan cross validation
install_load('glmnet')
cv.r <- cv.glmnet(x, y, alpha=0); plot(cv.r)
best.lr <- cv.r$lambda.min #Lambda Ridge Terbaik
best.ridge <- glmnet(x,y,alpha=0,lambda=best.lr); coef(best.ridge)
rsq <- function(bestmodel,bestlambda,x,y){
#y duga
y.duga <- predict(bestmodel, s = bestlambda, newx = x)
#JKG dan JKT
jkt <- sum((y - mean(y))^2)
jkg <- sum((y.duga- y)^2)
#find R-Squared
rsq <- 1 - jkg/jkt
return(rsq)
}
r2.ridge <- rsq(best.ridge, best.lr, x, y)
cat("R-Squared :", r2.ridge)
cv.l <- cv.glmnet(x,y,alpha=1); plot(cv.l)
best.ll <- cv.l$lambda.min #Lambda Lasso Terbaik
bestlasso <- glmnet(x,y,alpha=1,lambda=best.ll); coef(bestlasso)
r2.lasso <- rsq(bestlasso, best.ll, x, y)
cat("R-Squared :", r2.lasso)
rsq <- data.frame(Dummy = r2.dummy, WLS = r2.wls, Ridge = r2.ridge,
Lasso = r2.lasso)
datatable(rsq,
filter = 'top',
options = list(pageLength = 5))
cat("R-Squared Terbaik :", names(rsq)[which.max(rsq)],
"\nDengan nilai :", max(rsq))
pre <- predict(model, newdata = data_test)
data_test. <- data_test %>%
mutate(UHH = pre)
xnew <- model.matrix(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09 +
PSTV12 +PSTV13, data=data_test.)[,-1]
pre <- predict(best.ridge, s=best.lr, newx = xnew)
pre <- data.frame( No = seq_len(nrow(pre)),  UHH = pre )
colnames(pre) <- c("No", "UHH")
datatable(pre,
filter = 'top',
options = list(pageLength = 5))
write.csv(pre, "predict.csv", row.names=FALSE)
as.matrix(data_test %>%
select(-PSTV04, -PSTV10, -PSTV11, -PSTV14)) %*% coef(best.ridge)
r2 <- data.frame(Dummy = r2.dummy, WLS = r2.wls, Ridge = r2.ridge,
Lasso = r2.lasso)
datatable(r2,
filter = 'top',
options = list(pageLength = 5))
r2$Dummy > r2$WLS
pre <- predict(model, newdata = data_test)
pre <- data.frame( No = seq_len(nrow(pre)),  UHH = pre )
nrow(pre)
pre <- predict(model, newdata = data_test)
data_test. <- data_test %>%
mutate(UHH = pre)
xnew <- model.matrix(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09 +
PSTV12 +PSTV13, data=data_test.)[,-1]
pre <- predict(best.ridge, s=best.lr, newx = xnew)
pre <- data.frame( No = seq_len(nrow(pre)),  UHH = pre )
colnames(pre) <- c("No", "UHH")
datatable(pre,
filter = 'top',
options = list(pageLength = 5))
write.csv(pre, "predict.csv", row.names=FALSE)
nrow(pre)
pre <- predict(model, newdata = data_test)
pre <- data.frame( No = seq_len(nrow(data_test)),  UHH = pre )
colnames(pre) <- c("No", "UHH")
datatable(pre,
filter = 'top',
options = list(pageLength = 5))
write.csv(pre, "predict.csv", row.names=FALSE)
View(read.csv("predict.csv"))
pre <- predict(model.wls, newdata = data_test)
pre <- data.frame( No = seq_len(nrow(data_test)),  UHH = pre )
colnames(pre) <- c("No", "UHH")
datatable(pre,
filter = 'top',
options = list(pageLength = 5))
write.csv(pre, "predict.csv", row.names=FALSE)
pre <- predict(model, newdata = data_test)
pre <- data.frame( No = seq_len(nrow(data_test)),  UHH = pre )
colnames(pre) <- c("No", "UHH")
datatable(pre,
filter = 'top',
options = list(pageLength = 5))
write.csv(pre, "predict.csv", row.names=FALSE)
View(pre$UHH)
pre$UHH
max(pre$UHH)
min(pre$UHH)
1 / lm(abs(model$residuals) ~ model$fitted.values)$fitted.values^2
weights <- 1 / abs(model$residuals)
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)$adj.r.squared
weights <- 1 / abs(model$residuals)
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)$adj.r.squared
weights <- 1 / lm(abs(model$residuals) ~ model$fitted.values)$fitted.values^2
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)$adj.r.squared
weights <- 1 / var(model$residuals)
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
var(model$residuals)
weights <- 1 / var(model$residuals)
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
var(model$residuals)
weights <- 1 / lm(abs(model$residuals) ~ model$fitted.values)$fitted.values^2
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)$adj.r.squared
weights <- 1 / (abs(model$residuals) + 1)
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)$adj.r.squared
weights <- 1 / exp(-abs(model$residuals))
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)$adj.r.squared
weights <- 1 / lm(abs(model$residuals) ~ model$fitted.values)$fitted.values^2
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)$adj.r.squared
weights <- 1 / (abs(model$residuals) + 1)
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)$adj.r.squared
weights <- 1 /  exp(-abs(model$residuals))
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)$adj.r.squared
weights <- 1 /  exp(-abs(model$residuals))
model.wls <- lm(UHH ~ PSTV05 +PSTV06 +PSTV07 +PSTV08 +PSTV09
+PSTV12 +PSTV13, data=data_train, weights = weights)
summary(model.wls)$adj.r.squared
summary(model.wls)
pre <- predict(model.wls, newdata = data_test)
pre <- data.frame( No = seq_len(nrow(data_test)),  UHH = pre )
colnames(pre) <- c("No", "UHH")
datatable(pre,
filter = 'top',
options = list(pageLength = 5))
write.csv(pre, "predict.csv", row.names=FALSE)
View(read.csv('predict.csv'))
View(read.csv('predict.csv'))
nrow(read.csv('predict.csv'))
r2.wls <- summary(model.wls)$adj.r.squared
cat("R-Squared :", r2.wls)
cat("R-Squared Terbaik :", names(rsq)[which.max(rsq)],
"\nDengan nilai :", max(rsq))
cat("R-Squared Terbaik :", names(rsq)[which.max(rsq)],
"\nDengan nilai :", max(rsq))
View(r2)
